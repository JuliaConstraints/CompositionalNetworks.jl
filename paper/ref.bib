@article{bezanson2017julia,
  title     = {Julia: A fresh approach to numerical computing},
  author    = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},
  journal   = {SIAM review},
  volume    = {59},
  number    = {1},
  pages     = {65--98},
  year      = {2017},
  publisher = {SIAM}
}

@misc{richoux2020automatic,
  primaryclass  = {cs.AI},
  author        = {Richoux, Florian and Baffier, Jean-François},
  eprint        = {2002.09811},
  year          = {2020},
  url           = {https://arxiv.org/abs/2002.09811},
  archiveprefix = {arXiv},
  title         = {Automatic Cost Function Learning with Interpretable Compositional Networks}
}

@article{richoux2016ghost,
  pages   = {1-1},
  author  = {Richoux, Florian and Uriarte, Alberto and Baffier, Jean-François},
  journal = {IEEE Transactions on Computational Intelligence and AI in Games},
  title   = {GHOST: A Combinatorial Optimization Framework for RTS-related Problems},
  number  = {99},
  doi     = {10.1109/TCIAIG.2016.2573199},
  year    = {2016},
  volume  = {PP},
  annote  = {\small GHOST is a competitive combinatorial optimization framework that a real-time strategy (RTS) AI developer can use to model and solve any problem encoded as a constraint satisfaction/optimization problem (CSP/COP).}
}

@incollection{cooper2020guidedtour,
  author    = {Cooper, Martin and Givry, Simon and Schiex, Thomas},
  title     = {Valued Constraint Satisfaction Problems},
  booktitle = {A Guided Tour of Artificial Intelligence Research},
  volume    = {2},
  pages     = {185-207},
  publisher = {Springer},
  year      = {2020}
}

@inproceedings{codognet2001adaptivesearch,
  author    = {Codognet, Philippe and Diaz, Daniel},
  title     = {Yet Another Local Search Method for Constraint Solving},
  booktitle = {International Symposium on Stochastic Algorithms: Foundations and Applications ({SAGA} 2001)},
  pages     = {73--90},
  publisher = {Springer},
  year      = {2001}
}

@article{stanley2007cppn,
  author    = {Stanley, Kenneth O.},
  title     = {{Compositional Pattern Producing Networks: A Novel Abstraction of Development}},
  journal   = {{Genetic Programming and Evolvable Machines}},
  volume    = {8},
  number    = {2},
  pages     = {131--162},
  publisher = {Springer},
  year      = {2007}
}

@article{baffier2022interpretable,
  author  = {Baffier, Jean-François and Chrit, Khalil and Richoux, Florian and Patinho, Pedro and Abreu, Salvador},
  title   = {Interpretable Composition Networks: A scaling glass-box neural network to learn combinatorial functions},
  journal = {IJCAI21-DSO Special issue of annals of mathematics and artificial intelligence on Data Science meets Optimization},
  volume  = {2},
  year    = {2022}
}

@software{art_wilde_2021_5110647,
  author    = {Art Wilde and
                  Daniel Thiem and
                  Leo and
                  Abhinav Gupta and
                  Andrew Haselgrove and
                  Daniel Molina and
                  Honeypot95 and
                  matago and
                  Rogerluo and
                  Valentin Churavy},
  title     = {Evolutionary.jl},
  month     = jul,
  year      = 2021,
  publisher = {Zenodo},
  version   = {v0.10.0},
  doi       = {10.5281/zenodo.5110647},
  url       = {https://doi.org/10.5281/zenodo.5110647}
}

@article{DunningHuchetteLubin2017,
  author  = {Iain Dunning and Joey Huchette and Miles Lubin},
  title   = {JuMP: A Modeling Language for Mathematical Optimization},
  journal = {SIAM Review},
  volume  = {59},
  number  = {2},
  pages   = {295-320},
  year    = {2017},
  doi     = {10.1137/15M1020575}
}

@article{MathOptInterface-2021,
  title     = {MathOptInterface: a data structure for mathematical optimization problems},
  author    = {Legat, Benoit and Dowson, Oscar and Garcia, Joaquim and Lubin, Miles},
  journal   = {INFORMS Journal on Computing},
  year      = {in press},
  publisher = {INFORMS}
}
 
@incollection{DBLP:books/sp/18/CodognetMDA18,
  author    = {Philippe Codognet and
               Danny Munera and
               Daniel Diaz and
               Salvador Abreu},
  editor    = {Youssef Hamadi and
               Lakhdar Sais},
  title     = {Parallel Local Search},
  booktitle = {Handbook of Parallel Constraint Reasoning},
  pages     = {381--417},
  publisher = {Springer},
  year      = {2018},
  url       = {https://doi.org/10.1007/978-3-319-63516-3\_10},
  doi       = {10.1007/978-3-319-63516-3\_10},
  timestamp = {Sat, 19 Oct 2019 19:02:50 +0200},
  biburl    = {https://dblp.org/rec/books/sp/18/CodognetMDA18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{chalumeau2021seapearl,
  author        = {Chalumeau, Félix and
               Coulon, Ilan and
               Cappart, Quentin and
               Rousseau, Louis-Martin},
  title         = {SeaPearl: {A} Constraint Programming Solver guided by Reinforcement
               Learning},
  journal       = {CoRR},
  volume        = {abs/2102.09193},
  year          = {2021},
  url           = {https://arxiv.org/abs/2102.09193},
  archiveprefix = {arXiv},
  eprint        = {2102.09193},
  timestamp     = {Wed, 24 Feb 2021 15:42:45 +0100},
  biburl        = {https://dblp.org/rec/journals/corr/abs-2102-09193.bib},
  bibsource     = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{nethercote2007minizinc,
  author    = {Nethercote, Nicholas
and Stuckey, Peter J.
and Becket, Ralph
and Brand, Sebastian
and Duck, Gregory J.
and Tack, Guido},
  editor    = {Bessi{\`e}re, Christian},
  title     = {MiniZinc: Towards a Standard CP Modelling Language},
  booktitle = {Principles and Practice of Constraint Programming -- CP 2007},
  year      = {2007},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {529--543},
  abstract  = {There is no standard modelling language for constraint programming (CP) problems. Most solvers have their own modelling language. This makes it difficult for modellers to experiment with different solvers for a problem.},
  isbn      = {978-3-540-74970-7}
}

@inproceedings{lattner2004llvm,
  title        = {LLVM: A compilation framework for lifelong program analysis \& transformation},
  author       = {Lattner, Chris and Adve, Vikram},
  booktitle    = {International Symposium on Code Generation and Optimization, 2004. CGO 2004.},
  pages        = {75--86},
  year         = {2004},
  organization = {IEEE}
}
@article{baffier2016parametric,
 pages         = {20 - 36},
 author        = {Baffier, Jean-François and Suppakitpaisarn, Vorapong and Hiraishi, Hidefumi and Imai, Hiroshi},
 journal       = {Discrete Optimization},
 title         = {Parametric multiroute flow and its application to multilink-attack network},
 doi           = {10.1016/j.disopt.2016.05.002},
 keywords      = {Graph and network algorithm, Approximation algorithm, Network flow, Network interdiction, Multiroute flow, Parametric optimization},
 issn          = {1572-5286},
 note          = {SI: ISCO 2014},
 year          = {2016},
 url           = {http://www.sciencedirect.com/science/article/pii/S1572528616300330},
 volume        = {22},
 abstract      = {We investigate variants of the max-flow problem in a network under k attacks. The network interdiction problem is to find the minimum max-flow value among (mk) networks that can be obtained by deleting each set of k links. The adaptive network flow problem is to find a flow of the network such that the flow value is maximum against any set of k links attack, when deleting the corresponding flow to those k links in the original flow. First, we prove that max-(k+1)-route flow is a (k+1)-approximation for both problems. Also, we develop a polynomial-time heuristic algorithm for both cases, called the iterative multiroute flow. Then in a second phase, we investigate properties of the function taking the real value h to the max h-route flow value, and apply the result to solve both of the problems. We show that the function is piecewise hyperbolic, and modify a standard parametric optimization technique to find this function. The running time of the algorithm is O(λT), when λ is a source–sink edge connectivity of our network and T the computation time of a max-flow algorithm. We show that for some instances, when h is optimally chosen, the max- h-route flow is an exact solution for both problems.}
}
