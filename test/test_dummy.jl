"""
    all_different(x; X = zeros(length(x), 1), param=nothing, dom_size)

Composition `all_different` generated by CompositionalNetworks.jl.
```
all_different = euclidean ∘ count_positive ∘ prod ∘ count_eq_right
```
"""
function all_different(x; X=zeros(length(x), 1), param=nothing, dom_size)
    CompositionalNetworks.tr_in(
        Tuple([CompositionalNetworks.tr_count_eq_right]), X, x, param
    )
    X[1:length(x), 1] .=
        1:length(x) .|> (i -> CompositionalNetworks.ar_prod(@view X[i, 1:1]))
    return CompositionalNetworks.ag_count_positive(@view X[:, 1]) |>
           (y -> CompositionalNetworks.co_euclidean(y; param, dom_size, nvars=length(x)))
end
